    # This class is essentially a struct meant for storing necessary information about a "people" item in TMA.
    # It also has a few methods for navigating around an open People object.
    # TODO Only currently supports Sysco users, as other users have a different format in TMA.
    # TODO Add in VIP support, if applicable.
    class TMAPeople:

        # Basic init method requiers browser and client.
        def __init__(self,TMADriverObject,client):
            self.TMADriver = TMADriverObject
            self.info_Client = client
            self.info_FirstName = None
            self.info_LastName = None
            self.info_EmployeeID = None
            self.info_Email = None
            self.info_OpCo = None
            self.info_IsTerminated = False
            self.info_EmployeeTitle = None

            self.info_LinkedInteractions = None
            self.info_LinkedServices = None

        # A simple __str__ method for neatly displaying people objects.
        def __str__(self):
            returnString = ""

            returnString += ("Name: " + self.info_FirstName + " " + self.info_LastName + " (" + self.info_EmployeeID + ")\n")
            returnString += ("Title: " + self.info_EmployeeTitle + " (" + self.info_Client + ", " + self.info_OpCo + ")\n")
            returnString += ("Email: " + self.info_Email + "\n")
            if(self.info_IsTerminated):
                returnString += "Status: Terminated\n"
            else:
                returnString += "Status: Active\n"
            returnString += "LINKED INTERACTIONS:\n"
            for i in self.info_LinkedInteractions:
                returnString += ("-" + str(i) + "\n")
            returnString += "LINKED SERVICES:\n"
            for i in self.info_LinkedServices:
                returnString += ("-" + str(i) + "\n")

            return returnString

        # Reads basic (non-linked) information from a People in TMA into this object.
        def readBasicInformation(self):
            firstNameString = "//div/div/fieldset/ol/li/span[contains(@id,'Detail_txtFirstName__label')]/following-sibling::span"
            self.info_FirstName = self.TMADriver.browser.find_element(by=By.XPATH,value=firstNameString).text
            lastNameString = "//div/div/fieldset/ol/li/span[contains(@id,'Detail_txtLastName__label')]/following-sibling::span"
            self.info_LastName = self.TMADriver.browser.find_element(by=By.XPATH,value=lastNameString).text
            employeeIDString = "//div/div/fieldset/ol/li/span[contains(@id,'Detail_lblEmployeeID__label')]/following-sibling::span"
            self.info_EmployeeID = self.TMADriver.browser.find_element(by=By.XPATH,value=employeeIDString).text
            emailString = "//div/div/fieldset/ol/li/span[contains(@id,'Detail_txtEmail__label')]/following-sibling::span"
            self.info_Email = self.TMADriver.browser.find_element(by=By.XPATH,value=emailString).text
            employeeStatusString = "//div/div/fieldset/ol/li/span[contains(@id,'Detail_ddlpeopleStatus__label')]/following-sibling::span"
            employeeStatus = self.TMADriver.browser.find_element(by=By.XPATH,value=employeeStatusString).text
            if(employeeStatus == "Active"):
                self.info_IsTerminated = False
            else:
                self.info_IsTerminated = True
            OpCoString = "//div/div/fieldset/ol/li/span[contains(@id,'Detail_lblLocationCode1__label')]/following-sibling::span"
            self.info_OpCo = self.TMADriver.browser.find_element(by=By.XPATH,value=OpCoString).text
            employeeTitleString = "//div/div/fieldset/ol/li/span[contains(@id,'Detail_txtTitle__label')]/following-sibling::span"
            self.info_EmployeeTitle = self.TMADriver.browser.find_element(by=By.XPATH,value=employeeTitleString).text
        # Reads an array of linked interaction numbers into info_LinkedInteractions.
        def readLinkedInteractions(self):
            self.navToLinkedTab("interactions")

            pageCountText = self.TMADriver.browser.find_element(by=By.XPATH,value=
                "//table/tbody/tr/td/span[contains(@id,'Detail_associations_link1_lblPages')]").text
            checkForSpace = False
            readNumbers = False
            pageCount = ''
            for i in pageCountText:
                if (i == 'f'):
                    checkForSpace = True
                    continue
                if (checkForSpace == True):
                    checkForSpace = False
                    readNumbers = True
                    continue
                if (readNumbers == True):
                    if (i == ')'):
                        break
                    else:
                        pageCount += i
                        continue
            pageCount = int(pageCount)

            arrayOfLinkedIntNumbers = []
            for i in range(pageCount):
                arrayOfLinkedInteractionsOnPage = self.TMADriver.browser.find_elements(by=By.XPATH,value=
                    "//table[contains(@id,'associations_link1_sgvAssociations')]/tbody/tr[contains(@class,'sgvitems')]/td[4]")
                arrayOfLinkedIntNumbersOnPage = []
                for j in arrayOfLinkedInteractionsOnPage:
                    arrayOfLinkedIntNumbersOnPage.append(j.text)
                for j in arrayOfLinkedIntNumbersOnPage:
                    if (j in arrayOfLinkedIntNumbers):
                        continue
                    arrayOfLinkedIntNumbers.append(j)

                time.sleep(1)
                if ((i + 1) < pageCount):
                    nextButton = self.TMADriver.browser.find_element(by=By.XPATH,value=
                        "//table/tbody/tr/td/div/div/input[contains(@name,'Detail$associations_link1$btnNext')][contains(@id,'Detail_associations_link1_btnNext')]")

                    while True:
                        self.TMADriver.browser.safeClick(by=None,element=nextButton)
                        time.sleep(3)
                        currentPageNumber = ''
                        pageCountText = self.TMADriver.browser.find_element(by=By.XPATH,value=
                            "//table/tbody/tr/td/span[contains(@id,'Detail_associations_link1_lblPages')]").text
                        spaceCheck = False
                        for j in pageCountText:
                            if (spaceCheck == True):
                                if (j == ' '):
                                    break
                                currentPageNumber += j
                            if (j == ' '):
                                spaceCheck = True
                                continue
                        currentPageNumber = int(currentPageNumber)

                        if (currentPageNumber == i + 2):
                            break
                        time.sleep(2)
                        continue
                    continue

            self.info_LinkedInteractions = arrayOfLinkedIntNumbers
            return True
        # Reads an array of linked service numbers into info_LinkedServices
        def readLinkedServices(self):
            self.navToLinkedTab("services")

            pageCountText = self.TMADriver.browser.find_element(by=By.XPATH,value=
                "//table/tbody/tr/td/span[contains(@id,'Detail_associations_link1_lblPages')]").text
            checkForSpace = False
            readNumbers = False
            pageCount = ''
            for i in pageCountText:
                if (i == 'f'):
                    checkForSpace = True
                    continue
                if (checkForSpace == True):
                    checkForSpace = False
                    readNumbers = True
                    continue
                if (readNumbers == True):
                    if (i == ')'):
                        break
                    else:
                        pageCount += i
                        continue
            pageCount = int(pageCount)

            arrayOfLinkedServiceNumbers = []
            for i in range(pageCount):
                arrayOfLinkedServicesOnPage = self.TMADriver.browser.find_elements(by=By.XPATH,value=
                    "//table[contains(@id,'associations_link1_sgvAssociations')]/tbody/tr[contains(@class,'sgvitems')]/td[5]")
                arrayOfLinkedServiceNumbersOnPage = []
                for j in arrayOfLinkedServicesOnPage:
                    arrayOfLinkedServiceNumbersOnPage.append(j.text)
                for j in arrayOfLinkedServiceNumbersOnPage:
                    if (j in arrayOfLinkedServiceNumbers):
                        continue
                    arrayOfLinkedServiceNumbers.append(j)

                time.sleep(1)
                if ((i + 1) < pageCount):
                    nextButton = self.TMADriver.browser.find_element(by=By.XPATH,value=
                        "//table/tbody/tr/td/div/div/input[contains(@name,'Detail$associations_link1$btnNext')][contains(@id,'Detail_associations_link1_btnNext')]")

                    while True:
                        self.TMADriver.browser.safeClick(by=None,element=nextButton)
                        time.sleep(3)
                        currentPageNumber = ''
                        pageCountText = self.TMADriver.browser.find_element(by=By.XPATH,value=
                            "//table/tbody/tr/td/span[contains(@id,'Detail_associations_link1_lblPages')]").text
                        spaceCheck = False
                        for j in pageCountText:
                            if (spaceCheck == True):
                                if (j == ' '):
                                    break
                                currentPageNumber += j
                            if (j == ' '):
                                spaceCheck = True
                                continue
                        currentPageNumber = int(currentPageNumber)

                        if (currentPageNumber == i + 2):
                            break
                        time.sleep(2)
                        continue
                    continue

            self.info_LinkedServices = arrayOfLinkedServiceNumbers
            return True
        # Reads both basic information and all linked information into this People object.
        def readAllInformation(self):
            self.readBasicInformation()
            self.readLinkedInteractions()
            self.readLinkedServices()

        # This method opens up a service, given by an entryID, turning the currently open tab
        # from a TMA people tab to a TMA people tab. Assumes we're currently on a person,
        # and looking at linked services.
        def openServiceFromPeople(self,serviceID):
            openServiceButton = f"//table/tbody/tr/td/table/tbody/tr[contains(@class,'sgvitems')]/td[text() = '{serviceID}']/parent::tr/td/a[contains(@id,'lnkDetail')]"
            targetAddress = self.TMADriver.browser.find_element(by=By.XPATH,value=openServiceButton).get_attribute("href")
            print(targetAddress)
            self.TMADriver.browser.get(targetAddress)
            print("soo... yeah")

        # Helper method to easily navigate between linked tabs.
        def navToLinkedTab(self, linkedTabName):
            lowerLinkedTabName = linkedTabName.lower()

            targetTab = "//table[contains(@id,'Detail_associations_link1_gvTable2')]/tbody/tr[contains(@class,'gridviewbuttons')]/td/span[contains(text(),'" + linkedTabName + "')]"
            targetTabTestFor = "//span[contains(text(),'" + lowerLinkedTabName + "')]/parent::td/parent::tr[contains(@class,'gridviewbuttonsSelected')]"

            self.TMADriver.browser.safeClick(by=By.XPATH,element=targetTab, repeat=True,repeatUntilNewElementExists=targetTabTestFor)

        # This function assumes that TMA is currently on a "People" page. It navigates to
        # the 'linked Services' tab, then simply clicks create new.
        def createNewLinkedService(self):
            self.navToLinkedTab("services")
            createNewString = "//table/tbody/tr/td/div/table/tbody/tr/td/a[contains(@id,'link1_lnkCreateNew')][text()='Create New Linked Item']"
            self.TMADriver.browser.safeClick(by=By.XPATH,element=createNewString)

        # This function simply returns the first 3 characters of the "info_OpCo" attribute.
        def scrapeSyscoOpCo(self):
            returnString = ""

            for i in range(3):
                returnString += self.info_OpCo[i]

            return returnString